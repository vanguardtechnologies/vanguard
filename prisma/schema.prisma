// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  company       String?
  title         String?
  phone         String?
  
  accounts      Account[]
  sessions      Session[]
  leads         Lead[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Lead Management
model Lead {
  id            String      @id @default(cuid())
  email         String
  name          String
  company       String?
  phone         String?
  title         String?
  source        LeadSource  @default(WEBSITE)
  status        LeadStatus  @default(NEW)
  message       String?     @db.Text
  
  // For tracking
  referrer      String?
  utmSource     String?
  utmMedium     String?
  utmCampaign   String?
  
  // Relations
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([email])
  @@index([status])
}

// Services
model Service {
  id            String      @id @default(cuid())
  slug          String      @unique
  title         String
  subtitle      String?
  description   String      @db.Text
  content       String      @db.Text
  icon          String?
  order         Int         @default(0)
  isActive      Boolean     @default(true)
  
  // SEO
  metaTitle     String?
  metaDescription String?
  
  // Features stored as JSON
  features      Json?
  benefits      Json?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([slug])
}

// Market Data
model MarketData {
  id            String      @id @default(cuid())
  year          Int
  category      String
  value         Float
  unit          String      @default("USD")
  description   String?
  source        String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([year, category])
  @@index([category])
}

// Blog/Resources
model Article {
  id            String      @id @default(cuid())
  slug          String      @unique
  title         String
  excerpt       String?
  content       String      @db.Text
  coverImage    String?
  category      ArticleCategory
  tags          String[]
  isPublished   Boolean     @default(false)
  publishedAt   DateTime?
  viewCount     Int         @default(0)
  
  // SEO
  metaTitle     String?
  metaDescription String?
  
  // Author info
  authorName    String
  authorRole    String?
  authorImage   String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([slug])
  @@index([category])
}

// Newsletter Subscriptions
model Newsletter {
  id            String      @id @default(cuid())
  email         String      @unique
  isActive      Boolean     @default(true)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Contact Form Submissions
model ContactSubmission {
  id            String      @id @default(cuid())
  name          String
  email         String
  company       String?
  phone         String?
  subject       String
  message       String      @db.Text
  status        ContactStatus @default(UNREAD)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([status])
}

// Enums
enum Role {
  USER
  PARTNER
  CLIENT
  ADMIN
}

enum LeadSource {
  WEBSITE
  CONTACT_FORM
  NEWSLETTER
  ASSESSMENT
  DOWNLOAD
  EVENT
  REFERRAL
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum ArticleCategory {
  MARKET_INSIGHTS
  INDUSTRY_NEWS
  GUIDES
  CASE_STUDIES
  ANNOUNCEMENTS
}

enum ContactStatus {
  UNREAD
  READ
  RESPONDED
  ARCHIVED
}
